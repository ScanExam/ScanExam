package fr.istic.tools.scanexam.core

class QuestionZone 
{
	float x
	float y
	float width
	float heigth
}

class Question 
{
	int ^id
	String name
	contains GradeScale gradeScale
	contains QuestionZone zone
}

class GradeScale 
{
	float maxPoint
	contains GradeEntry[] steps
}
class GradeEntry
{
	int ^id
	float step
	String header
}
class Exam {
	int ^id
	String name
	contains Page[] pages
	
	op float computeMaxGrade() {
		var float grade = 0f
		for(page: pages) {
			grade += page.questions.map[q | q.gradeScale.maxPoint].reduce[acc, v | v + acc]
		}
		grade
	}
}
class Page 
{
	int ^id
	contains Question[] questions
}
class Comment {
	int pageId
	float x
	float y
	float pointerX
	float pointerY
}

class TextComment extends Comment {
	String text
}

class HandwritingComment {
	int pageId
	contains Line[] lines
}

class Line {
	float x1 
	float y1 
	float x2 
	float y2
	float thinkness
	String color //hexa
	}

class Grade {
	refers GradeEntry[] entries
	contains Comment[] comments
}

class StudentSheet {
	int ^id
	String studentName
	int[] posPage
	contains Grade[] grades
	
	
	op float computeGrade()
	{
		 var result = 0f;
		 
		 for (var i = 0 ; i < grades.size ; i++)
		 {
		 	 val res = grades.get(i).entries.stream.map(grade | grade.step).reduce[acc,v | v+acc]
		 	 if(res.isPresent)
			 	result += res.get
		 }
		 
		return result
	}
	
	op boolean isGraded() {
		grades.findFirst[g | g.entries.isEmpty] === null
	}
		
}
